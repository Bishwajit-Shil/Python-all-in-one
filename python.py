# -*- coding: utf-8 -*-
"""PythonBootcamp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ohEfajcLdgi6vDcqQ8OZa5kvur6CFv2A

##1. ARITHMETIC OPERATION

###Simple Arithmetic
"""

a=5
b=6
c=a+b
print(c)

"""###Simple Arithmetic - Get input from User (+,-,*,%)"""

a = float(input("Enter the value of a: "))
b = float(input("Enter the value of b: "))
add=a+b
print(add)

a = int(input("Enter the value of a: "))
b = int(input("Enter the value of b: "))
add=a+b
sub=a-b
mult=a*b
div=a/b
mod=a%b
print("ADD:",add)
print("Sum: {0}, Diff: {1}, Mult: {2}, Div:{3}, Mod:{4}".format(add,sub,mult,div,mod)) #Print using Format

print("Sum: %d, Diff: %d, Mult: %d, Div:%15.6f, Mod:%d"%(add,sub,mult,div,mod)) #Print using PADDING & PRECISION

print('{0:<4} | {1:^4} | {2:^4} | {3:>4}'.format('Sum','Diff','Mult','Div'))
print('{0:<4} | {1:^4} | {2:^4} | {3:>4}'.format(add,sub,mult,div))

"""###Simple Arithmetic - Get input from User (power)"""

a=2
b=3
power=a**b #Power
print(power)

"""##2. STRINGS

###Create String
"""

a = 'Python'
b = "Bootcamp"
print(a+b)

"""###Length of String"""

a="Champ"
print(len(a))

a="S"
b=a*5
print(b)

"""###String Index """

a="champ"
print(a[3]) #identifing the element based on index
print(a[2:]) #Grab the remaing elements except upto the Index
print(a[:2]) #Grab the elements upto the Index
print(a[-1]) #Grab the Last element
print(a[:-1]) #Grab the elements except last element
print(a[::2]) #Grab everything with 2 steps
print(a[::-1]) #Print string backwards

"""###String Functions"""

a="Master Class"
print(a.upper()) #Changing to Upper case
print(a.lower()) #Changing to Lowerb= a.split() case

b= a.split() #Splitting String
print(b)
print(b[1]) #Printing the splitting string based on Index

c="ElonMusk,SteveJobs,BillGates"
d=c.split(",") #Splitting string based on Delimitter
print(d)
print(d[1])

a="Master Class"
print(f"Welcome to Python {a} !") #Formatting string Literals

"""##3. LIST

###Create List
"""

a = [1,2,3,4,5]
b = ["Champ",21,99.5]
print(a,b)
print(len(b)) #Length of List
print(b[0]) #Locate list element based on Index
print(a[1:]) #print elements except 1st
print(a[:2]) #Print elements upto 2nd element
print(a+b) #Concatenate 2 list

a = [1,2,3,4,5]
a.append(6) #inserting new elements to the existing list
print(a)

a = [1,2,3,4,5]
a.reverse() #Reverse list
print(a)
print(min(a)) #Minimum
print(max(a)) #Maximum

a = [1,2,3,4,5]
from random import shuffle
shuffle(a)
a

a=[1,2,3]
b=[4,5,6]
c=[a,b] #Nested List Matrix
print(c)
print(c[0]) #Printing row
print(c[0][0]) #Printing 1st element

"""##4. DICTIONARIES

###Creating Dictionary : Key & Value
"""

a = {"Name":"Elon","Age":50,"Company":["SpaceX","Tesla"]}
a

a = {"Name":"Elon","Age":50,"Company":["SpaceX","Tesla"]}
print(a["Name"]) #Printing value based on its Key
a["Age"]= 51 #Changing values
a

b={"Climate":{"Condition":{"Temperature":"38 Degree","Humidity":"70 Percentage"}}}
print(b["Climate"]["Condition"]["Humidity"])

print(a.keys()) #Printing Keys of the Dictionaries
print(a.values()) #Printing Values of the Dictionaries
print(a.items()) #Printing Tuple of the all items

"""##5. TUPLES

###Creating Tuples
"""

a = ("Champ",21,99.5)
a

print(len(a)) #Length of tuple
print(a[0]) #Printing elements from tuple via index
print(a.index("Champ")) #Getting Index of Elements

"""##6. SETS

###Creating Set
"""

a = set()

a.add("Champ")
a

a.add(30)
a

b = ["Champ",21,99.5]
set(b)

"""##7. BOOLEAN

###Creating Boolean
"""

a = True

a = 10
b = 5
c=15
print(a<b)
print(a>b)
print(a==b)
print(a!=b)
print(a<=b)
print(a>=b)
print(a<b and c>a)
print(a<b or c>a)

"""##8.Python Statements

###If
"""

a = True
if a:
  print("Positive")
else:
  print("negative")

a=10
b=6
c=6

if a<b:
  print("a less than b")
elif c==b:
  print("a is equal to b")
  print("a is not less than b")
  if c<a:
    print("c is less than b")
else:
  print("a is not less than b")

"""###For"""

a = [1,2,3,4,5,6,7,8,9,10]
for i in a:
  print(i)

a = [i for i in 'Champ']
a

"""###Odd & Even Number"""

a = [1,2,3,4,5,6,7,8,9,10]
for i in a:
  if i % 2 == 0:
    print(i,"Even Number")
  else:
    print(i,"Odd Number")

"""###String - For"""

for a in "Hello all":
  print(a)

"""###Dictionary - For"""

a = {"Name":"Elon","Age":50,"Company":["SpaceX","Tesla"]}
for k,v in a.items():
  print(k)
  print(v)

"""###While"""

a=0
while a <11:
  print(a)
  a+=1 #a=a+1

"""### While - Break & Continue"""

a=0
while a < 10:
  print(a)
  a+=1
  if a==5:
    print("a is equal to 5")
    break
  else:
    print("Continueeee")
    continue

"""###Range"""

for a in range (6):
  print(a)

for a in range (1,10,1):
  print(a)

for a in range (10,0,-3):
  print(a)

a = [i**2 for i in range(0,5)]
a

a = [i for i in range(10) if i % 2 == 0]
a

"""### Enumerate - To track no. of iteration in the loop, without working with variable increament """

a=0
for i,a in enumerate("Hello Champ"):
  print(i,a)

"""### Zip - Creating a tuples by zipping 2 list"""

a = ["Name","Age","Country"]
b = ["Champ",27,"India"]
list(zip(a,b))

"""##9. Function

###Initializing & Calling basic function
"""

def welcome():
  print("Hello guyz Welcome to Python Bootcamp !!!")

welcome()

"""###Initializing & Calling basic function - With Argument"""

def welcome(a):
  print("Hello {0},Welcome to Python Bootcamp !!!".format(a))

welcome("Champ")

"""###Print & Return"""

def add(a,b):
  add = a+b
  print("Sum of {0} and {1} is {2}".format(a,b,add))

def addR(a,b):
  add = a+b
  return add

ans = addR(45,5)
final = ans*500
final

"""## Practice Project - Extracting Prime no."""

def check(numbers):
    primeNumber = []
    for number in numbers:
      if number>1:
        for i in range(2, int(number/2)+1):
          if (number % i) == 0:#If number is divisible by any number between 2 and number / 2, it is not prime
              print(number, "is not a prime number")
              break
        else:
          print(number, "is a prime number")
          primeNumber.append(number)
      else:
        pass
    return primeNumber

check([2,3,4,5,6,7,8,9])

"""## 10 Map Function - Map a function to an iterable object"""

def cubeFn(num):
    return num**3

a = [1,2,3,4,5]
list(map(cubeFn,a))

"""##11. Filter Functions - Yields items of iterable in which function is true"""

def evenFn(num):
    return num % 2 == 0

a = [0,1,2,3,4,5,6,7,8,9,10]
print(list(map(evenFn,a)))
print(list(filter(evenFn,a)))

"""## 12. Lambda Fn - To create anonymous functions, without using def"""

#Normal Fn
def cubeFn(num):
    return num**3
cubeFn(6)

# LAMBDA
cubefn = lambda num: num**3
cubefn(5)

"""##13. *args and **kwargs"""

#Normal Fn. with Arguements
def addR(a,b,c,d):
  add = a+b+c
  return add
addR(10,20,30,40)

#Purpose of args
def addR(*argg):
  return sum(argg)
addR(10,20,30,40,52,75,8,5,26,15)

"""## **Kwargs - dictionary of key/value pairs"""

def func(**kwargs):
    if 'name' in kwargs:
        print("My Name is {0}".format(kwargs['name']))
    if 'age' in kwargs:
        print("My Age is {0}".format(kwargs['age']))
    else:
        print("No Key Found")
        
func(name='champ',age=24,marks=99)

"""## 14. Object Oriented Programming

##Class

### User defined objects created x using Class- Initializing Class
"""

class Student:
  print("Hello All")
x = Student() #Object Instantiation
print(type(x))

class Student:
  def func():
    print("Hello all welcome to the session")
Student.func()

class Student:
  def func(self):
    print("Hello all welcome to the session")
x = Student()
x.func()

"""###Class Object attribute - same for any instance of the class"""

class Student:
  year = '2021'
  def func():
    print("Hello all welcome to the session")
x = Student()
x.year

class Student:
  year = '2021'
  def func(self):
    print("Hello all welcome to the session", self.year)
x = Student()
x.func()

"""### Attribute of an Object (characteristic of an object) Attribute won't take any argument"""

class Student:
    def __init__(self,name): #__init__ (Method) to initialize attribute of an object (Constructor)
        self.name = name #self.name = attribute initialized
 #(Creating Instance of Student class{Object of certain class})       
elon = Student(name='Elon Musk !') #name: argument

print(elon.name) #accessing class attribute through object

class Student:
    def __init__(self,name): 
        self.name = name 
elon = Student(name='Elon Musk !')
champ = Student(name='I am Champ !')

print(elon.name) 
print(champ.name)

class Student:
    def __init__(self,name,age): 
        self.name = name 
        self.age = age
elon = Student(name='Elon Musk !',age=40) 

print(elon.name)
print(elon.age)

class Student:
    Total = 500

    def __init__(self, marks):
        self.marks=marks
        print("Initialized...")

    def findLoss(self):
        return self.Total - self.marks

    def findPercentage(self):
        return self.marks/self.Total*100
        
a = Student(marks=450)

print('Total Marks: ',a.Total)
print('Lossed Marks: ',a.findLoss())
print('Percentage is: ',a.findPercentage())

"""##Special Methods"""

class Student:
    Total = 500

    def __init__(self, name,marks,gender):
        self.name=name
        self.marks=marks
        self.gender=gender
        print("Initialized...")

    def __len__(self):
        return self.marks

    def __str__(self):
        return "Name: %s | Marks: %s | Gender: %s" %(self.name,self.marks,self.gender)

    def __del__(self):
        print("Student Database is Deleted")
        
a = Student('champ',450,'male')

print(a)
print('Marks: ',len(a))
del a

"""##Inheritance - Help to reduce complexity of the program

Base Class & Derived Class
"""

class Elon:
    def __init__(self):
        print("Profile created")

    def name(self):
        print("Elon Musk")

    def age(self):
        print("40")


class SpaceX(Elon):
    def __init__(self):
        Elon.__init__(self)
        print("Company Profile created")

    def name(self):
        print("SpaceX")

    def type(self):
        print("Private Space travel")

a = SpaceX()

a.name() #Derived class modified behavior of base class

a.age()

"""##Polymorphism

Different object classes can share the same method name, and those methods can be called from the same place even though a different objects passed in
"""

class Elon:
    def __init__(self,name):
        self.name = name
    def type(self):
        return "Entrepreneur"
class Sundar:
    def __init__(self,name):
        self.name = name
    def type(self):
        return "CEO"
          
person1 = Elon('Elon Musk') #name: argument
person2 = Sundar('Sundar Pichai')

#returning unique result of object which have same method(type)
print(person1.type())
print(person2.type())

for i in [person1,person2]:
  print(i.name)
  print(i.type())
  print("**************")

"""## 15 Python Decorators - functions which modify the functionality of another function/Class

"""

'''@decName
def func():
    print("statement")

EQUAL TO

def func():
    print("statement")
    
func = decName(func)'''

"""###FUNCTION AS OBJECT"""

def welcome(a):
  print("Hello {0},Welcome to Python Bootcamp !!!".format(a))

a = welcome #No paranthesis, if its paranthesis it will call fn. - FUNCTION AS OBJECT
a("champ")

"""###FUNCTION IN VARIABLE"""

def lowerCase(text):
  return text.lower()

def upperCase(text):
  return text.upper()

def a(welcome):
  message = welcome("Hello all, Welcome to Python Bootcamp") #FUNCTION IN VARIABLE
  print(message)

a(lowerCase)
a(upperCase)

def lowerCase(text):
  return text.lower()

def a(welcome):
  message = welcome("Hello all, Welcome to Python Bootcamp") #FUNCTION IN VARIABLE
  print(message)

a(lowerCase)

"""###RETURNING FUNCTION FROM ANOTHER FUNCTION"""

def addMain(a):#child
  def addSub(b): #parent  = a+b
    print(a,b)
    return a+b #apple
  return addSub #return of parent is return of child now - apple {child = return(parent)}

addition = addMain(100)
print(addition(75))

"""##DECORATORS in Action"""

def decoratorFunc (welcome):#2. Decorator
  def a(): #3. can access the outer local functions like in this case "welcome"
    print("Start")
    welcome() #4.calling actual fn.
    print("End")
  return a

def subFunc(): #veg with cheese
  print("Sub fn")

subFunc = decoratorFunc(subFunc) #1. subFunc inside the decorator to control behavior

subFunc()

"""## 16 Python Generators -  to generate as we go along, instead of holding everything in memory & generator functions will automatically suspend and resume their execution and state around the last point of value generation | n. This feature is known as state suspension"""

def square(n):
  for i in range (n):
    yield i**2

for n in square(10):
  print(n)

"""###Builtin Function - next"""

def square():
  for i in range (n):
    yield i**2

a = square()

print(next(a)) #After yielding all the values next() caused a StopIteration error

"""###Builtin Function - iter"""

a = "champ"
for i in a:
  print(i)

next(a)

iterOper = iter(a)

next(iterOper)

"""## 17 Python Modules & Libraries

###Accessing one Python program from another program
"""

import main #importing python file
main.welcome() #parathesis (Func)
x = main.a #no paranthesis (variable)
y = main.b
print(x+y)

"""### Accessing python program from another Python program present in another Folder"""

from sample_data.demo import main
main.welcome()
x = main.a
y = main.b
print(x+y)

"""##Try Except Finally

###Base Exception Errors
"""

BaseException
 +-- SystemExit
 +-- KeyboardInterrupt
 +-- GeneratorExit
 +-- Exception
      +-- StopIteration
      +-- StandardError
      |    +-- BufferError
      |    +-- ArithmeticError
      |    |    +-- FloatingPointError
      |    |    +-- OverflowError
      |    |    +-- ZeroDivisionError
      |    +-- AssertionError
      |    +-- AttributeError
      |    +-- EnvironmentError
      |    |    +-- IOError
      |    |    +-- OSError
      |    |         +-- WindowsError (Windows)
      |    |         +-- VMSError (VMS)
      |    +-- EOFError
      |    +-- ImportError
      |    +-- LookupError
      |    |    +-- IndexError
      |    |    +-- KeyError
      |    +-- MemoryError
      |    +-- NameError
      |    |    +-- UnboundLocalError
      |    +-- ReferenceError
      |    +-- RuntimeError
      |    |    +-- NotImplementedError
      |    +-- SyntaxError
      |    |    +-- IndentationError
      |    |         +-- TabError
      |    +-- SystemError
      |    +-- TypeError
      |    +-- ValueError
      |         +-- UnicodeError
      |              +-- UnicodeDecodeError
      |              +-- UnicodeEncodeError
      |              +-- UnicodeTranslateError
      +-- Warning
           +-- DeprecationWarning
           +-- PendingDeprecationWarning
           +-- RuntimeWarning
           +-- SyntaxWarning
           +-- UserWarning
           +-- FutureWarning
       +-- ImportWarning
       +-- UnicodeWarning
       +-- BytesWarning

for i in range(3, -3, -1):
    try:
        print(1.0 / i)
    except ZeroDivisionError:
        print("You're trying to divide by zero. U IDIOT")

for i in range(3, -3, -1):
    try:
        print(1.0 / i)
    except ZeroDivisionError as er:
        print('Zero Division Error: ', str(er.args[0]))

def check():
    while True:
        try:
            a = int(input("Please Value of a in numbers: "))
            b = int(input("Please enter value of b in numbers: "))
        except:
            print("You did not entered numbers")
            continue
        else:
            print("Yes its Numbers")
            break
        finally:
            print("Execution Successfull")
            print(a+b)

check()

"""###Importing Library"""

import math #import libraryName

"""###Installing Library"""

!pip install imutils #pip install libraryName (! only while executing in colab, it is not needed in command window)

"""###uninstalling Library"""

!pip uninstall imutils #pip uninstall libraryName

import imutils

"""###Installing Library based on Version"""

!pip install imutils==0.5.4 #pip install libraryName==versionNumber

"""###Checking Installed Library version"""

import imutils
imutils.__version__

"""##Playing with Libraries

###Math Library
"""

import math
print(dir(math))
print(math.pi)

import math as mt
print(dir(mt))
print(mt.pi)

"""###Reduce"""

from functools import reduce
lst =[47,11,42,13]
reduce(lambda x,y: x+y,lst)

"""###IPython"""

from IPython.display import Image
Image('https://venturebeat.com/wp-content/uploads/2018/09/ironman.jpg')

"""###Filter"""

def check(num):
    if num%2 ==0:
        return True
lst =range(20)
list(filter(check,lst))

"""###Counter"""

from collections import Counter
print(Counter([5,6,8,4,7,5,9,6,2,1,3,5,8,4,5,8,7,2,5,8,6,2,5,4,1,2,6,8,7,4,5,7,5,8,2,2,6])) #Numbers
print(Counter('sdasdasdadasdasdasdassdasdassdasdadasdaasdasdasd')) #String

"""###Regular Expression

"""

import re
patt = r'\d{2}-\d{2}-\d{4}'
message = "His birthday is 16-11-2016"
re.findall(patt,message)

"""###Working with Files"""

f = open("welcome.txt", "r")
print(f.read())
f.close()

f = open("welcome.txt", "r")
print(f.read(5))
f.close()

f = open("welcome.txt", "r")
print(f.readline())
f.close()

f = open("welcome.txt", "r")
for x in f:
  print(x)

"""###File Handling using Pandas"""

!pip install pandas

import pandas as pd
data = pd.read_csv('data.csv')
print(data.to_string())

import pandas as pd
data = pd.read_csv('data.csv')
print(data.shape)
print(data.describe())
print(data.head(5))

"""###Working with Directories"""

import os
print(os.getcwd()) #current working directory
print(os.listdir())
os.mkdir("Junk")

import shutil
shutil.move('welcome.txt','/content/Junk')

import send2trash
os.listdir()
send2trash.send2trash('Junk/welcome.txt')

os.listdir()

"""###Time"""

import time
print(time.time())#time since epoch

import time
print(time.gmtime())

print (time.ctime())

startTime = time.time()
i=0
while(i<5):
  i+=1
  print(".")
  time.sleep(1) #delay 1 second
stopTime = time.time()
diff = stopTime - startTime
diff

"""###Date & Time"""

import datetime
x = datetime.datetime.now()
print(x)

import datetime
x = datetime.datetime(2021, 12, 16, 12, 30, 51) #(year, month, date, hour, minute, second, microsecond, tzone)
print(x)

# Commented out IPython magic to ensure Python compatibility.
# '''%a	Weekday, short version	Wed	
# %A	Weekday, full version	Wednesday	
# %w	Weekday as a number 0-6, 0 is Sunday	3	
# %d	Day of month 01-31	31	
# %b	Month name, short version	Dec	
# %B	Month name, full version	December	
# %m	Month as a number 01-12	12	
# %y	Year, short version, without century	18	
# %Y	Year, full version	2018	
# %H	Hour 00-23	17	
# %I	Hour 00-12	05	
# %p	AM/PM	PM	
# %M	Minute 00-59	41	
# %S	Second 00-59	08	
# %f	Microsecond 000000-999999	548513	
# %z	UTC offset	+0100	
# %Z	Timezone	CST	
# %j	Day number of year 001-366	365	
# %U	Week number of year, Sunday as the first day of week, 00-53	52	
# %W	Week number of year, Monday as the first day of week, 00-53	52	
# %c	Local version of date and time	Mon Dec 31 17:41:00 2018	
# %C	Century	20	
# %x	Local version of date	12/31/18	
# %X	Local version of time	17:41:00	
# %%	A % character	%	
# %G	ISO 8601 year	2018	
# %u	ISO 8601 weekday (1-7)	1	
# %V	ISO 8601 weeknumber (01-53)	01'''

import datetime
a = datetime.datetime(2021, 12, 16)
print(a.strftime("%a"))